/*-----------------------------------------------------------------------------
 *
 *  Name:		hs.c
 *  Description:	hypersplit packet classification algorithm
 *  Version:		1.0 (release)
 *  Author:		Wenjun Li (wenjunli@pku.edu.cn)
 *  Date:		4/15/2018
 *
 *  comments1:		Modified work based on the code of hypersplit from Yaxuan Qi
 *  comments2:		We simply use hypersplit for big rules in this version. However, its performance may be very bad for big rule sets(e.g., 100K).
 *                      A simple way to resolve this problem: increase threshold value to reduce the number of big rules(e.g. from 2^16 to 2^24,2^28).
 *                      Another more general way is to introduce a few cuttings before splitting to reduce set size, which will be given in future versions.
 *
 *-----------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include"hs.h"
#include <sys/time.h>
using namespace std;

namespace simulator {
hstrie::hstrie(int number, vector<Rule*> &subset, int binth1, hs_node_t* node)
{
  gChildCount = 0;
  gNumTreeNode = 0;
  gNumLeafNode = 0;
  gWstDepth = 0;
  gAvgDepth = 0;
  gNumTotalNonOverlappings = 0;
  binth = binth1;

  ruleset.num = number;

  for (int i = 0; i < ruleset.num; i++) {
	  rule_t* temp = new rule_t;
	  ruleset.ruleList.push_back(temp);
	  ruleset.ruleList[i]->pri = subset[i]->id;
	  for (int j = 0; j < DIM; j++) {
		  ruleset.ruleList[i]->range[j][0] = subset[i]->range[j][LowDim];
		  ruleset.ruleList[i]->range[j][1] = subset[i]->range[j][HighDim];
	  }
  }


  struct timeval gStartTime,gEndTime;
  gettimeofday(&gStartTime,NULL);
  // build hyper-split tree

  BuildHSTree(&ruleset, node, 0);

  gettimeofday(&gEndTime,NULL);

  //result of hypersplit tree
  result.num_rules = number;
  result.num_childnode = gChildCount;
  result.wst_depth = gWstDepth;
  result.avg_depth = (float) gAvgDepth/gChildCount;
  result.num_tree_node = gNumTreeNode;
  result.num_leaf_node = gNumLeafNode;
  result.total_mem_kb = (double)(gNumTreeNode*8 + gNumLeafNode*4)/1024;

}



/*
 * ===  FUNCTION  ======================================================================
 *         Name:  Compare
 *  Description:  for qsort
 *     Comments:  who can make it better?
 * =====================================================================================
 */
int SegPointCompare (const void * a, const void * b)
{
  if ( *(unsigned int*)a < *(unsigned int*)b )
      return -1;
  else if ( *(unsigned int*)a == *(unsigned int*)b )
      return 0;
  else
      return 1;
}

/*
 * ===  FUNCTION  ======================================================================
 *         Name:  BuildHSTree
 *  Description:  building hyper-splitting tree via recursion
 * =====================================================================================
 */
int hstrie::BuildHSTree (rule_set_t* ruleset, hs_node_t* currNode, unsigned int depth)
{
    /*Update Leaf node*/
    if(ruleset->num <= binth)
    {
		currNode->d2s = 0;
		currNode->depth = depth;
		currNode->thresh = 0;
		currNode->child[0] = NULL;
		currNode->child[1] = NULL;
		currNode->ruleset = ruleset;
		gChildCount ++;
		gNumLeafNode ++;
		if (gNumLeafNode % 1000000 == 0)
			printf(".");
		if (gWstDepth < depth)
			gWstDepth = depth;
		gAvgDepth += depth;
		return	SUCCESS;

    }


	/* generate segments for input filtset */
	unsigned int			dim, num, pos=0;
	unsigned int			maxDiffSegPts = 1;	/* maximum different segment points */
	unsigned int			d2s = 0;		/* dimension to split (with max diffseg) */
	unsigned int   			thresh=0;
	unsigned int			range[2][2];	/* sub-space ranges for child-nodes */
	vector<vector<unsigned int>>				segPoints(DIM,vector<unsigned int>(2*ruleset->num,0));
	vector<vector<unsigned int>> 			segPointsInfo(DIM,vector<unsigned int>(2*ruleset->num,0));
	vector<unsigned int>	tempSegPoints(2*ruleset->num,0);
	vector<unsigned int>	tempRuleNumList(ruleset->num,0);
	float					hightAvg, hightAll=0;
	rule_set_t*				childRuleSet=NULL;

	/*Generate Segment Points from Rules*/
	for (dim = 0; dim < DIM; dim ++) {
		/* N rules have 2*N segPoints */

		for (num = 0; num < ruleset->num; num ++) {
			segPoints[dim][2*num] = ruleset->ruleList[num]->range[dim][0];
			segPoints[dim][2*num + 1] = ruleset->ruleList[num]->range[dim][1];
		}
	}

	/*Sort the Segment Points*/
	for(dim = 0; dim < DIM; dim ++) {
		sort(segPoints[dim].begin(), segPoints[dim].end());
	}

	/*Compress the Segment Points, and select the dimension to split (d2s)*/
	fill(tempSegPoints.begin(), tempSegPoints.end(), 0);
	hightAvg = 2*ruleset->num + 1;
	for (dim = 0; dim < DIM; dim ++) {
		unsigned int	i, j;
		unsigned int	*hightList;
		unsigned int	diffSegPts = 1; /* at least there are one different segment point */
		tempSegPoints[0] = segPoints[dim][0];
		for (num = 1; num < 2*ruleset->num; num ++) {
			if (segPoints[dim][num] != tempSegPoints[diffSegPts-1]) {
				tempSegPoints[diffSegPts] = segPoints[dim][num];
				diffSegPts ++;
			}
		}
		/*Span the segment points which is both start and end of some rules*/
		pos = 0;
		for (num = 0; num < diffSegPts; num ++) {
			int	i;
			int ifStart = 0;
			int	ifEnd	= 0;
			segPoints[dim][pos] = tempSegPoints[num];
			for (i = 0; i < ruleset->num; i ++) {
				if (ruleset->ruleList[i]->range[dim][0] == tempSegPoints[num]) {
					ifStart = 1;
					break;
				}
			}
			for (i = 0; i < ruleset->num; i ++) {
				if (ruleset->ruleList[i]->range[dim][1] == tempSegPoints[num]) {
					ifEnd = 1;
					break;
				}
			}
			if (ifStart && ifEnd) {
				segPointsInfo[dim][pos] = 0;
				pos ++;
				segPoints[dim][pos] = tempSegPoints[num];
				segPointsInfo[dim][pos] = 1;
				pos ++;
			}
			else if (ifStart) {
				segPointsInfo[dim][pos] = 0;
				pos ++;
			}
			else {
				segPointsInfo[dim][pos] = 1;
				pos ++;
			}

		}

		/* now pos is the total number of points in the spanned segment point list */

		if (depth == 0) {
			gNumNonOverlappings[dim] = pos;
			gNumTotalNonOverlappings *= (unsigned long long) pos;
		}

		if (pos >= 3) {
			hightAll = 0;
			hightList = (unsigned int *) malloc(pos * sizeof(unsigned int));
			for (i = 0; i < pos-1; i++) {
				hightList[i] = 0;
				for (j = 0; j < ruleset->num; j++) {
					if (ruleset->ruleList[j]->range[dim][0] <= segPoints[dim][i] \
							&& ruleset->ruleList[j]->range[dim][1] >= segPoints[dim][i+1]) {
						hightList[i]++;
						hightAll++;
					}
				}
			}

			if (hightAvg > hightAll/(pos-1)) {	/* possible choice for d2s, pos-1 is the number of segs */
				float hightSum = 0;

				/* select current dimension */
				d2s = dim;
				hightAvg = hightAll/(pos-1);

				/* the first segment MUST belong to the left child */
				hightSum += hightList[0];
				for (num = 1; num < pos-1; num++) {  /* pos-1 >= 2; seg# = num */
					if (segPointsInfo[d2s][num] == 0)
						thresh = segPoints[d2s][num] - 1;
					else
						thresh = segPoints[d2s][num];

					if (hightSum > hightAll/2) {
						break;
					}
					hightSum += hightList[num];
				}
				range[0][0] = segPoints[d2s][0];
				range[0][1] = thresh;
				range[1][0] = thresh + 1;
//				std::cout << segPoints[d2s][0] << " " << d2s << std::endl;
				range[1][1] = segPoints[d2s][pos-1];
//				std::cout << segPoints[d2s][pos-1] << " " << d2s << " " << pos-1<< std::endl;
			}
			/* print segment list of each dim */

			free(hightList);
		} /* pos >=3 */


		if (maxDiffSegPts < pos) {
			maxDiffSegPts = pos;
		}
	}
	tempSegPoints.clear();


	/*Update Leaf node*/
	if (maxDiffSegPts <= 2) {
		currNode->d2s = 0;
		currNode->depth = depth;
		currNode->thresh = 0;
		currNode->child[0] = NULL;
		currNode->child[1] = NULL;
		currNode->ruleset = ruleset;
		for (int x=0;x<DIM;x++){
			segPoints[x].clear();
			segPointsInfo[x].clear();
		}
		segPoints.clear();
		segPointsInfo.clear();
		gChildCount ++;
		gNumLeafNode ++;
		if (gNumLeafNode % 1000000 == 0)
			printf(".");
		if (gWstDepth < depth)
			gWstDepth = depth;
		gAvgDepth += depth;
		return	SUCCESS;
	}


	/*Update currNode*/
	/*Binary split along d2s*/

	if (range[1][0] > range[1][1]) {
		printf("\n>>maxDiffSegPts=%d  range[1][0]=%x  range[1][1]=%x",
				maxDiffSegPts, range[1][0], range[1][1]);
		printf("\n>>fuck\n"); exit(0);
	}

	for (int x=0;x<DIM;x++){
		segPoints[x].clear();
		segPointsInfo[x].clear();
	}
	segPoints.clear();
	segPointsInfo.clear();


	gNumTreeNode ++;
	std::cout << gNumTreeNode << std::endl;
	currNode->d2s = d2s;
	currNode->depth = depth;
	currNode->thresh = thresh;
	currNode->child[0] = new hs_node_t;
	//(hs_node_t *) malloc(sizeof(hs_node_t));

	/*Generate left child rule list*/
	fill(tempRuleNumList.begin(), tempRuleNumList.end(), 0);

	pos = 0;
	for (num = 0; num < ruleset->num; num++) {
		if (ruleset->ruleList[num]->range[d2s][0] <= range[0][1]
		&&	ruleset->ruleList[num]->range[d2s][1] >= range[0][0]) {
			tempRuleNumList[pos] = num;
			pos++;
		}
	}
	childRuleSet = new rule_set_t;
	childRuleSet->num = pos;
	for (num = 0; num < childRuleSet->num; num++) {
		rule_t* temp = new rule_t;
		childRuleSet->ruleList.push_back(temp);
		childRuleSet->ruleList[num] = ruleset->ruleList[tempRuleNumList[num]];
		/* in d2s dim, the search space needs to be trimmed off */
		if (childRuleSet->ruleList[num]->range[d2s][0] < range[0][0])
			childRuleSet->ruleList[num]->range[d2s][0] = range[0][0];
		if (childRuleSet->ruleList[num]->range[d2s][1] > range[0][1])
			childRuleSet->ruleList[num]->range[d2s][1] = range[0][1];
	}
//	free(tempRuleNumList);

	BuildHSTree(childRuleSet, currNode->child[0], depth+1);

	/*Generate right child rule list*/
	currNode->child[1] = new hs_node_t;
//			(hs_node_t *) malloc(sizeof(hs_node_t));
	fill(tempRuleNumList.begin(), tempRuleNumList.end(), 0);

	pos = 0;
	for (num = 0; num < ruleset->num; num++) {  // low<=end && high>=start
		if (ruleset->ruleList[num]->range[d2s][0] <= range[1][1]
		&&	ruleset->ruleList[num]->range[d2s][1] >= range[1][0]) {
			tempRuleNumList[pos] = num;
			pos++;
		}
	}

	childRuleSet = new rule_set_t;
	childRuleSet->num = pos;
	childRuleSet->ruleList.clear();
	for (num = 0; num < childRuleSet->num; num++) {
		rule_t* temp = new rule_t;
		childRuleSet->ruleList.push_back(temp);
		childRuleSet->ruleList[num] = ruleset->ruleList[tempRuleNumList[num]];
		/* in d2s dim, the search space needs to be trimmed off */
		if (childRuleSet->ruleList[num]->range[d2s][0] < range[1][0])
			childRuleSet->ruleList[num]->range[d2s][0] = range[1][0];
		if (childRuleSet->ruleList[num]->range[d2s][1] > range[1][1])
			childRuleSet->ruleList[num]->range[d2s][1] = range[1][1];
	}

	tempRuleNumList.clear();

	BuildHSTree(childRuleSet, currNode->child[1], depth+1);
	std::cout << "end" << std::endl;

	return	SUCCESS;
}

/*
 * ===  FUNCTION  ======================================================================
 *         Name:  LookupHSTtree
 *  Description:  test the hyper-split-tree with give 4-tuple packet
 * =====================================================================================
 */
int LookupHSTree(hs_node_t* rootnode, const Packet & p, int *queryCount)
{

	int cover = 1;
	int match = 0;
	int i,k;

	hs_node_t* node = rootnode;

	while (node->child[0] != NULL) {
		queryCount[0]++;
		if (p[node->d2s] <= (node->thresh)){
			node = node->child[0];
		}
		else{
			node = node->child[1];
		}

	}
	if(node != NULL){
		for(i = 0; i < node->ruleset->num; i++){
			queryCount[0]++;
			cover = 1;
			for(k = 0; k < MAXDIMENSIONS; k++){
				if(node->ruleset->ruleList[i]->range[k][0] > p[k] ||
				    node->ruleset->ruleList[i]->range[k][1] < p[k]){
					cover = 0;
					break;
				}
			}
			if(cover == 1){
				match = 1;
				break;
			}
		}
	}


	if(match == 1){
//		printf("\n>>Matched Rule %d\n", node->ruleset->ruleList[i]->pri);
		return node->ruleset->ruleList[i]->pri;
	}else{
		return -1;
	}

}

}/* namepace simulator */

