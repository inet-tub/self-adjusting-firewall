/*
 * follow.cpp
 *
 *  Created on: Jul 13, 2021
 *      Author: vamsi
 */

#include "./../includes/Assert.h"
#include <stdint.h>
#include "follow.h"
#include "./../includes/external_includes.h"

using namespace std;

namespace simulator{
follow::follow() {

}

follow::~follow() {

}

int
follow::CreateClassifier(CommandLine* cmd){

	string f = "/home/vamsi/src/phd/self-adjusting-firewall/classbench/db_generator/MyFilters10k";
	cmd->Get("ruleset", f);
	rules= InputReader::ReadFilterFile(f);

	time_point<steady_clock> start, end;
    
    duration<double,std::milli> elapsed_milliseconds;
    
    start = steady_clock::now();

    for (const Rule& r : rules) {

    	listRules.push_back(&r);
    }

    end = steady_clock::now();
    
    elapsed_milliseconds = end - start;
    
    this->initDelay = elapsed_milliseconds.count();
    
    return 0;
}

unsigned int
follow::InsertRule(const Rule& r){
	// TODO
	return 0;
}

unsigned int
follow::DeleteRule(const Rule& r){

//	ASSERT(head!=NULL,"Empty list, Unexcepted when a packet is to be classified");
//		struct listNode* node = head;
//		uint32_t match=0;
//		uint32_t nodesTraversed=0;
//		// Find the rule and then delete
//		while(!match || node!=NULL){
//			if (node->rule->priority == r.priority){ // priority numbers are unique, its enough to check this
//				match=1;
//				nodesTraversed+=1;
//				node->prevNode->nextNode= node->nextNode;
//				node->nextNode->prevNode = node->prevNode;
//			}
//			else{
//				node=node->nextNode;
//				nodesTraversed+=1;
//			}
//		}
//	if (!match){
//		//TODO something is wrong. Could be that a rule is asked to be deleted when it does not exist.
//	}
//	return nodesTraversed;
}

void
follow::mtf(listNode*& first, listNode*& second){

	/* When the second node moves forwards, second's previous and second's next nodes must be connected together */
	/* Second node moves exactly behind first */

	ASSERT(second!=NULL,"trying to move a NULL pointer in the list!");

	if (first==second){
		std::cout << "here first==second" << std::endl;
		return;
	}
	else if (second->prevNode==first){
		std::cout << "second prev == first" << std::endl;
		return;
	}
	else if (second==head){
		std::cout << "here second==head" << std::endl;
		return;
	}
	else if (second==tail){
		std::cout << "here tail" << std::endl;
		listNode* secPrev = second->prevNode;
		listNode* secNext = NULL;

		listNode* firstNext;

		if (first!=NULL){
			firstNext = first->nextNode;
			second->prevNode = first;
			second->nextNode = firstNext;
			first->nextNode = second;
			firstNext->prevNode = second;
		}
		else{
			firstNext = head;
			second->prevNode = NULL;
			second->nextNode = firstNext;
			head->prevNode = second;
			head = second;
		}

		secPrev->nextNode = NULL; // because second is tail and now secPrev becomes tail.
		tail = secPrev;
	}
	else if (first==head){
		std::cout << "here head" << std::endl;
		listNode* secPrev = second->prevNode;
		listNode* secNext = second->nextNode;

		listNode* firstNext = first->nextNode;

		second->prevNode = first;
		second->nextNode = firstNext;
		first->nextNode = second;
		firstNext->prevNode = second;

		secPrev->nextNode = secNext;
		secNext->prevNode = secPrev;

	}
	else{
		std::cout << "here else" << std::endl;
		listNode* secPrev = second->prevNode;
		listNode* secNext = second->nextNode;

		listNode* firstNext = NULL;

		if (first!=NULL){
			std::cout << "here first not null" << std::endl;
			firstNext = first->nextNode;
			second->prevNode = first;
			second->nextNode = firstNext;
			first->nextNode = second;
			firstNext->prevNode = second;
		}
		else{
			std::cout << "here first null" << std::endl;
			firstNext = head;
			second->prevNode = NULL;
			second->nextNode = firstNext;
			head->prevNode = second;
			head = second;
		}

		secPrev->nextNode = secNext;
		secNext->prevNode = secPrev;
	}

}

bool
follow::depends(const Rule& dependency, const Rule& rule) {
		for (int i = 0; i < 5; i++) {
			if ( (rule.range[i][HighDim] < dependency.range[i][LowDim]) || (rule.range[i][LowDim] > dependency.range[i][HighDim]) ) return false;
		}
		if (dependency.priority > rule.priority)
			return true;
		else
			return false;
}


listNode*
follow::findDependency(listNode * node){

	listNode* temp = node->prevNode;
	bool dependencyFound = false;
	int count = 0;
	while (temp!= NULL && !dependencyFound){
		dependencyFound = depends(*temp->rule,*node->rule);

		if (!dependencyFound){
			temp=temp->prevNode;
		}
		count++;
	}

	return temp;
}


unsigned int 
follow::AccessRule(const Packet& p){

//	ASSERT(head!=NULL,"Empty list, Unexcepted when a packet is to be classified");

	bool match=false;
	uint32_t nodesTraversed=0;

	list<const Rule*>::iterator node = listRules.begin();
	for (uint32_t i =0; i < listRules.size(); i++){
		match= (*node)->MatchesPacket(p);
		nodesTraversed++;
		if (match)
			break;

		++node;
	}

	if(!match){
		std::cout << "rule not found "  << std::endl;
	}
	else{
		std::cout << "rule found " << std::endl;
	}

	// Reconfiguration

	if (node!=listRules.begin() && reconfigure==true){

		list<const Rule*>::iterator temp = node;

		while(temp!=listRules.begin()){

			bool dependencyFound=false;
			while(temp!=listRules.begin() && !dependencyFound){
				list<const Rule*>::iterator tempp = temp;
				--tempp;
				dependencyFound = depends(**tempp,**node);
				if (!dependencyFound){
					--temp;
				}
			}

			listRules.splice(temp,listRules,node);
			node = temp;
		}
	}


//	struct listNode* dnode= node;
//	if( dnode!=NULL && dnode!=head && reconfigure==true){
//
//    	struct listNode* temp = dnode->prevNode;
//
//    	/* starting from node which has been accessed before, search backwards towards the head to find a dependency and recurse */
//
//    	int count=0;
//    	while (temp!=NULL){
//
//    		temp = findDependency(dnode);
//	    	/* if a dependency is found then move the accessed node just behind the dependency */
//
////    		temp=head->nextNode;
////    		temp=NULL;
//
//    			/* node moves behind temp */
//	    		mtf(temp,dnode);
//
//	    		count++;
//
//	    		if (temp!=NULL){
//	    			dnode=temp; /* This triggers the recursive move following the dependencies, until "temp" becomes the head. */
//	    			temp=temp->prevNode;
//	    		}
////	    		temp=temp->prevNode;
//
//    	}
//		std::cout << count << std::endl;
//
//	}
	totalNodesTraversed+=nodesTraversed;
	totalAccess+=1;

	 std::cout << "nodes Traversed " << nodesTraversed << std::endl;
	return nodesTraversed;

}

unsigned int 
follow:: GetNumRules() const{
    return rules.size();
}

unsigned int 
follow::GetMemorysize() const{
	// TODO
	return 0;
}

double 
follow::GetInitDelay() const{
	return this->initDelay;
}


} /* namespace simulator */
